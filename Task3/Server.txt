#include <iostream>
#include <string>
#include <winsock2.h>
#include <ws2tcpip.h>
#pragma comment(lib, "Ws2_32.lib")
using namespace std;

void handle_client(SOCKET client_socket) {
    char buffer[1024];
    string request;    
    int bytes_received;     

    do {
        bytes_received = recv(client_socket, buffer, sizeof(buffer) - 1, 0);
        if (bytes_received > 0) {
            buffer[bytes_received] = '\0';
            request += buffer;

            if (request.find("\r\n\r\n") != string::npos) {
                break;
            }
        }
    } while (bytes_received > 0);

    if (request.find("GET") == 0) {
        string response_body = "<html><body><h1>Проверка работоспособности HTTP-сервера на C++!</h1></body></html>"; // Страница, которая будет отправлена клиенту
        // HTTP ответ
        string response =
            "HTTP/1.1 200 OK\r\n"
            "Host: 127.0.0.1\r\n"
            "Server: C++\r\n"
            "Content-Type: text/html\r\n"
            "Content-Length: " + std::to_string(response_body.size()) + "\r\n"
            "Connection: close\r\n"
            "\r\n" +
            response_body;

        send(client_socket, response.c_str(), response.size(), 0);
    }

    shutdown(client_socket, SD_SEND);
    closesocket(client_socket);
}

int main() {
    setlocale(LC_ALL, "rus");

    WSADATA wsaData;
    SOCKET server_socket, client_socket;
    struct sockaddr_in server_addr, client_addr;
    int addr_len = sizeof(client_addr);
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        cerr << "Ошибка инициализации WSAStartup: " << WSAGetLastError() << endl;
        return 1;
    }

    server_socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (server_socket == INVALID_SOCKET) {
        cerr << "Ошибка создания сокета: " << WSAGetLastError() << endl;
        WSACleanup();
        return 1;
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(8080);

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) == SOCKET_ERROR) {
        cerr << "Ошибка привязки (bind): " << WSAGetLastError() << endl;
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }
    if (listen(server_socket, SOMAXCONN) == SOCKET_ERROR) {
        cerr << "Ошибка прослушивания (listen): " << WSAGetLastError() << endl;
        closesocket(server_socket);
        WSACleanup();
        return 1;
    }
    cout << "Сервер запущен. Порт 8080" << endl;

    while (true) {
        client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &addr_len);
        if (client_socket == INVALID_SOCKET) {
            cerr << "Ошибка при приёме подключения (accept): " << WSAGetLastError() << endl;
            continue;
        }
        handle_client(client_socket);
    }

    closesocket(server_socket);
    WSACleanup();
    return 0;
}


