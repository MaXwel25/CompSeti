#include <iostream>
#include <string>
#include <winsock2.h>
#include <ws2tcpip.h>

#pragma comment(lib, "ws2_32.lib")

using std::cin;
using std::cout;
using std::cerr;
using std::endl;
using std::string;

#define SERVER_IP "26.4.69.179"
#define PORT "8080"
#define BUFFER_SIZE 2048

int main() {
    setlocale(LC_ALL, "ru");
    WSADATA wsaData;
    SOCKET connect_socket = INVALID_SOCKET;
    struct addrinfo* result = NULL, * ptr = NULL, hints;
    int iResult;
    char buffer[BUFFER_SIZE];

    // Инициализация Winsock
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        cerr << "Ошибка WSAStartup: " << iResult << endl;
        return 1;
    }

    ZeroMemory(&hints, sizeof(hints));
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    // Получение адреса сервера
    iResult = getaddrinfo(SERVER_IP, PORT, &hints, &result);
    if (iResult != 0) {
        cerr << "Ошибка getaddrinfo: " << iResult << endl;
        WSACleanup();
        return 1;
    }

    // Попытка подключения
    for (ptr = result; ptr != NULL; ptr = ptr->ai_next) {
        connect_socket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
        if (connect_socket == INVALID_SOCKET) {
            cerr << "Ошибка создания сокета: " << WSAGetLastError() << endl;
            WSACleanup();
            return 1;
        }

        iResult = connect(connect_socket, ptr->ai_addr, (int)ptr->ai_addrlen);
        if (iResult == SOCKET_ERROR) {
            closesocket(connect_socket);
            connect_socket = INVALID_SOCKET;
            continue;
        }
        break;
    }

    freeaddrinfo(result);

    if (connect_socket == INVALID_SOCKET) {
        cerr << "Не удалось подключиться к серверу!" << endl;
        WSACleanup();
        return 1;
    }

    // Ввод имени пользователя
    string client_name;
    cout << "Введите ваше имя: ";
    getline(cin, client_name);

    // Отправка имени серверу
    iResult = send(connect_socket, client_name.c_str(), (int)client_name.length(), 0);
    if (iResult == SOCKET_ERROR) {
        cerr << "Ошибка отправки имени: " << WSAGetLastError() << endl;
        closesocket(connect_socket);
        WSACleanup();
        return 1;
    }

    cout << "Добро пожаловать, " << client_name << "! Вводите сообщения (для выхода введите 'exit'):" << endl;

    while (true) {
        string input;
        getline(cin, input);

        if (input == "exit") {
            break;
        }

        // Отправка сообщения
        iResult = send(connect_socket, input.c_str(), (int)input.length(), 0);
        if (iResult == SOCKET_ERROR) {
            cerr << "Ошибка отправки: " << WSAGetLastError() << endl;
            closesocket(connect_socket);
            WSACleanup();
            return 1;
        }

        // Получение ответа
        iResult = recv(connect_socket, buffer, BUFFER_SIZE, 0);
        if (iResult > 0) {
            buffer[iResult] = '\0';
            cout << "Ответ сервера: " << buffer << endl;
        }
        else if (iResult == 0) {
            cout << "Соединение закрыто сервером" << endl;
            break;
        }
        else {
            cerr << "Ошибка получения: " << WSAGetLastError() << endl;
            break;
        }
    }

    closesocket(connect_socket);
    WSACleanup();
    return 0;
}